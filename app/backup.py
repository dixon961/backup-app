import os
import sys
import yaml
import logging
import subprocess
from datetime import datetime
import requests
import telebot
import threading
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

CONFIG_PATH = '/config/config.yml'
RCLONE_CONFIG_PATH = '/config/rclone/rclone.conf'

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
try:
    with open(CONFIG_PATH, 'r') as f:
        config = yaml.safe_load(f)
except FileNotFoundError:
    logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {CONFIG_PATH}")
    sys.exit(1)
except Exception as e:
    logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    sys.exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN') or config.get('telegram', {}).get('token')
AUTHORIZED_USER_ID = int(config.get('telegram', {}).get('chat_id'))

if not TELEGRAM_TOKEN or not AUTHORIZED_USER_ID:
    logging.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_TOKEN –∏–ª–∏ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# ====================================================================
# –°–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏ –±–µ–∫–∞–ø–∞ (–Ω–µ–º–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞)
# ====================================================================

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {'chat_id': AUTHORIZED_USER_ID, 'text': message, 'parse_mode': 'Markdown'}
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")

def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –≤—ã–≤–æ–¥, –ª–æ–≥–∏—Ä—É—è –æ—à–∏–±–∫–∏."""
    logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
    result = subprocess.run(command, capture_output=True, text=True, check=False)
    if result.returncode != 0:
        error_message = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{result.stderr or '–ù–µ—Ç –≤—ã–≤–æ–¥–∞ –æ–± –æ—à–∏–±–∫–µ.'}"
        logging.error(error_message)
        raise RuntimeError(error_message)
    logging.info(f"–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n{result.stdout or '–ù–µ—Ç –≤—ã–≤–æ–¥–∞.'}")
    return result.stdout

def do_backup_task(task_name):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∫–∞–ø–∞ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–æ—Ç–∞."""
    task = next((t for t in config['tasks'] if t['name'] == task_name), None)
    if not task:
        error_msg = f"–ó–∞–¥–∞—á–∞ —Å –∏–º–µ–Ω–µ–º '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        logging.error(error_msg)
        send_telegram_message(f"‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–∞–ø–∞*\n\n{error_msg}")
        return

    globals_conf = config.get('globals', {})
    source_path = task['source']
    archive_prefix = task['archive_prefix']
    retention_days = task.get('retention_days', globals_conf.get('default_retention_days', 0))
    remote_name = globals_conf['rclone_remote_name']
    remote_path = os.path.join(globals_conf['remote_base_path'], task_name)

    if not os.path.isdir(source_path):
        error_msg = f"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_path}"
        send_telegram_message(f"‚ùå *–û—à–∏–±–∫–∞ –±–µ–∫–∞–ø–∞*\n\n–ó–∞–¥–∞—á–∞: `{task_name}`\n\n–ü—Ä–∏—á–∏–Ω–∞:\n`{error_msg}`")
        return

    timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    archive_name = f"{archive_prefix}_{timestamp}.zip"
    local_archive_path = f"/tmp/{archive_name}"

    try:
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è '{task_name}'...")
        run_command(['zip', '-r', local_archive_path, source_path])

        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ '{archive_name}'...")
        rclone_cmd = [
            'rclone', '-v', '--config', RCLONE_CONFIG_PATH, '--timeout', '1h',
            '--multi-thread-cutoff', '256M', '--multi-thread-chunk-size', '128M',
            '--multi-thread-streams', '4', 'copy', local_archive_path, f'{remote_name}:{remote_path}'
        ]
        run_command(rclone_cmd)

        if retention_days > 0:
            logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ {retention_days} –¥–Ω–µ–π...")
            rclone_cleanup_cmd = [
                'rclone', '--config', RCLONE_CONFIG_PATH, 'delete',
                f'{remote_name}:{remote_path}', '--min-age', f'{retention_days}d'
            ]
            run_command(rclone_cleanup_cmd)
        
        send_telegram_message(f"‚úÖ *–£—Å–ø–µ—à–Ω—ã–π –±–µ–∫–∞–ø*\n\n–ó–∞–¥–∞—á–∞: `{task_name}`\n–ê—Ä—Ö–∏–≤: `{archive_name}`")

    except Exception as e:
        error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –±–µ–∫–∞–ø–∞*\n\n–ó–∞–¥–∞—á–∞: `{task_name}`\n\n–ü—Ä–∏—á–∏–Ω–∞:\n`{e}`"
        logging.error(error_msg)
        send_telegram_message(error_msg)
    finally:
        if os.path.exists(local_archive_path):
            os.remove(local_archive_path)
            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ —É–¥–∞–ª–µ–Ω: {local_archive_path}")

def run_backup_in_thread(task_name):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –±–µ–∫–∞–ø–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    logging.info(f"–ó–∞–ø—É—Å–∫ –±–µ–∫–∞–ø–∞ '{task_name}' –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")
    thread = threading.Thread(target=do_backup_task, args=(task_name,))
    thread.start()

# ====================================================================
# –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è —Å –ª–æ–≥–∏–∫–æ–π Telegram-–±–æ—Ç–∞
# ====================================================================

def is_authorized(message_or_call):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    return message_or_call.from_user.id == AUTHORIZED_USER_ID

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üóÑÔ∏è –†—É—á–Ω–æ–π –±–µ–∫–∞–ø", callback_data="manual_backup_start"))
    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not is_authorized(message):
        bot.reply_to(message, "Permission denied.")
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    if not is_authorized(call):
        bot.answer_callback_query(call.id, "Permission denied.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    action, *params = call.data.split(':')

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π ---

    if action == 'manual_backup_start':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –±–µ–∫–∞–ø–∞
        bot.answer_callback_query(call.id)
        tasks = config.get('tasks', [])
        if not tasks:
            bot.edit_message_text("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –±–µ–∫–∞–ø–∞.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return
        
        markup = InlineKeyboardMarkup()
        for task in tasks:
            markup.add(InlineKeyboardButton(task['name'], callback_data=f"select_task:{task['name']}"))
        markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –±–µ–∫–∞–ø–∞:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

    elif action == 'select_task':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        task_name = params[0]
        bot.answer_callback_query(call.id)
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–≤–µ—Ä–µ–Ω", callback_data=f"confirm_backup:{task_name}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="manual_backup_start")
        )
        bot.edit_message_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∫–∞–ø –¥–ª—è –∑–∞–¥–∞—á–∏ `{task_name}`?", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup, parse_mode="Markdown")

    elif action == 'confirm_backup':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∫–∞–ø –≤ —Ñ–æ–Ω–µ
        task_name = params[0]
        bot.answer_callback_query(call.id, f"–ù–∞—á–∏–Ω–∞—é –±–µ–∫–∞–ø –∑–∞–¥–∞—á–∏ '{task_name}'...")
        bot.edit_message_text(f"üöÄ –ë–µ–∫–∞–ø –∑–∞–¥–∞—á–∏ `{task_name}` –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="Markdown")
        run_backup_in_thread(task_name)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        bot.send_message(call.message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    elif action == 'back_to_main':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        bot.answer_callback_query(call.id)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_main_menu_keyboard())


# ====================================================================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞
# ====================================================================

if __name__ == "__main__":
    # –°—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        task_to_run = sys.argv[1]
        logging.info(f"–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {task_to_run}")
        do_backup_task(task_to_run)
    else:
        # –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
        logging.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...")
        send_telegram_message("ü§ñ –ë–æ—Ç –¥–ª—è –±–µ–∫–∞–ø–æ–≤ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        bot.infinity_polling()